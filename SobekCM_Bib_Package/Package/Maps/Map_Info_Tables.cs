//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by xsd, Version=1.1.4322.2032.
// 

#pragma warning disable 1591

namespace SobekCM.Bib_Package.Maps
{
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class Map_Info_Tables : DataSet {
        
        private FeatureDataTable tableFeature;
        
        private StreetDataTable tableStreet;
        
        private Corporation_LinkDataTable tableCorporation_Link;
        
        private Person_LinkDataTable tablePerson_Link;
        
        private Sheet_LinkDataTable tableSheet_Link;
        
        private DataRelation relationFeature_Corp_Link;
        
        private DataRelation relationFeature_Person_Link;
        
        private DataRelation relationFeature_Sheet_Link;
        
        public Map_Info_Tables() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected Map_Info_Tables(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Feature"] != null)) {
                    this.Tables.Add(new FeatureDataTable(ds.Tables["Feature"]));
                }
                if ((ds.Tables["Street"] != null)) {
                    this.Tables.Add(new StreetDataTable(ds.Tables["Street"]));
                }
                if ((ds.Tables["Corporation_Link"] != null)) {
                    this.Tables.Add(new Corporation_LinkDataTable(ds.Tables["Corporation_Link"]));
                }
                if ((ds.Tables["Person_Link"] != null)) {
                    this.Tables.Add(new Person_LinkDataTable(ds.Tables["Person_Link"]));
                }
                if ((ds.Tables["Sheet_Link"] != null)) {
                    this.Tables.Add(new Sheet_LinkDataTable(ds.Tables["Sheet_Link"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FeatureDataTable Feature {
            get {
                return this.tableFeature;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StreetDataTable Street {
            get {
                return this.tableStreet;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Corporation_LinkDataTable Corporation_Link {
            get {
                return this.tableCorporation_Link;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Person_LinkDataTable Person_Link {
            get {
                return this.tablePerson_Link;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Sheet_LinkDataTable Sheet_Link {
            get {
                return this.tableSheet_Link;
            }
        }
        
        public override DataSet Clone() {
            Map_Info_Tables cln = ((Map_Info_Tables)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Feature"] != null)) {
                this.Tables.Add(new FeatureDataTable(ds.Tables["Feature"]));
            }
            if ((ds.Tables["Street"] != null)) {
                this.Tables.Add(new StreetDataTable(ds.Tables["Street"]));
            }
            if ((ds.Tables["Corporation_Link"] != null)) {
                this.Tables.Add(new Corporation_LinkDataTable(ds.Tables["Corporation_Link"]));
            }
            if ((ds.Tables["Person_Link"] != null)) {
                this.Tables.Add(new Person_LinkDataTable(ds.Tables["Person_Link"]));
            }
            if ((ds.Tables["Sheet_Link"] != null)) {
                this.Tables.Add(new Sheet_LinkDataTable(ds.Tables["Sheet_Link"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableFeature = ((FeatureDataTable)(this.Tables["Feature"]));
            if ((this.tableFeature != null)) {
                this.tableFeature.InitVars();
            }
            this.tableStreet = ((StreetDataTable)(this.Tables["Street"]));
            if ((this.tableStreet != null)) {
                this.tableStreet.InitVars();
            }
            this.tableCorporation_Link = ((Corporation_LinkDataTable)(this.Tables["Corporation_Link"]));
            if ((this.tableCorporation_Link != null)) {
                this.tableCorporation_Link.InitVars();
            }
            this.tablePerson_Link = ((Person_LinkDataTable)(this.Tables["Person_Link"]));
            if ((this.tablePerson_Link != null)) {
                this.tablePerson_Link.InitVars();
            }
            this.tableSheet_Link = ((Sheet_LinkDataTable)(this.Tables["Sheet_Link"]));
            if ((this.tableSheet_Link != null)) {
                this.tableSheet_Link.InitVars();
            }
            this.relationFeature_Corp_Link = this.Relations["Feature_Corp_Link"];
            this.relationFeature_Person_Link = this.Relations["Feature_Person_Link"];
            this.relationFeature_Sheet_Link = this.Relations["Feature_Sheet_Link"];
        }
        
        private void InitClass() {
            this.DataSetName = "Map_Info_Tables";
            this.Prefix = "";
            this.Namespace = "";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableFeature = new FeatureDataTable();
            this.Tables.Add(this.tableFeature);
            this.tableStreet = new StreetDataTable();
            this.Tables.Add(this.tableStreet);
            this.tableCorporation_Link = new Corporation_LinkDataTable();
            this.Tables.Add(this.tableCorporation_Link);
            this.tablePerson_Link = new Person_LinkDataTable();
            this.Tables.Add(this.tablePerson_Link);
            this.tableSheet_Link = new Sheet_LinkDataTable();
            this.Tables.Add(this.tableSheet_Link);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("Feature_Corp_Link", new DataColumn[] {
                        this.tableFeature.FeatureIDColumn}, new DataColumn[] {
                        this.tableCorporation_Link.FeatureIDColumn});
            this.tableCorporation_Link.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("Feature_Person_Link", new DataColumn[] {
                        this.tableFeature.FeatureIDColumn}, new DataColumn[] {
                        this.tablePerson_Link.FeatureIDColumn});
            this.tablePerson_Link.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("Feature_Sheet_Link", new DataColumn[] {
                        this.tableFeature.FeatureIDColumn}, new DataColumn[] {
                        this.tableSheet_Link.FeatureIDColumn});
            this.tableSheet_Link.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationFeature_Corp_Link = new DataRelation("Feature_Corp_Link", new DataColumn[] {
                        this.tableFeature.FeatureIDColumn}, new DataColumn[] {
                        this.tableCorporation_Link.FeatureIDColumn}, false);
            this.Relations.Add(this.relationFeature_Corp_Link);
            this.relationFeature_Person_Link = new DataRelation("Feature_Person_Link", new DataColumn[] {
                        this.tableFeature.FeatureIDColumn}, new DataColumn[] {
                        this.tablePerson_Link.FeatureIDColumn}, false);
            this.Relations.Add(this.relationFeature_Person_Link);
            this.relationFeature_Sheet_Link = new DataRelation("Feature_Sheet_Link", new DataColumn[] {
                        this.tableFeature.FeatureIDColumn}, new DataColumn[] {
                        this.tableSheet_Link.FeatureIDColumn}, false);
            this.Relations.Add(this.relationFeature_Sheet_Link);
        }
        
        private bool ShouldSerializeFeature() {
            return false;
        }
        
        private bool ShouldSerializeStreet() {
            return false;
        }
        
        private bool ShouldSerializeCorporation_Link() {
            return false;
        }
        
        private bool ShouldSerializePerson_Link() {
            return false;
        }
        
        private bool ShouldSerializeSheet_Link() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void FeatureRowChangeEventHandler(object sender, FeatureRowChangeEvent e);
        
        public delegate void StreetRowChangeEventHandler(object sender, StreetRowChangeEvent e);
        
        public delegate void Corporation_LinkRowChangeEventHandler(object sender, Corporation_LinkRowChangeEvent e);
        
        public delegate void Person_LinkRowChangeEventHandler(object sender, Person_LinkRowChangeEvent e);
        
        public delegate void Sheet_LinkRowChangeEventHandler(object sender, Sheet_LinkRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FeatureDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnFeatureID;
            
            private DataColumn columnName;
            
            private DataColumn columnType;
            
            private DataColumn columnUnits;
            
            private DataColumn columnLongitude;
            
            private DataColumn columnLatitude;
            
            private DataColumn columnDescription;
            
            internal FeatureDataTable() : 
                    base("Feature") {
                this.InitClass();
            }
            
            internal FeatureDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn FeatureIDColumn {
                get {
                    return this.columnFeatureID;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            internal DataColumn UnitsColumn {
                get {
                    return this.columnUnits;
                }
            }
            
            internal DataColumn LongitudeColumn {
                get {
                    return this.columnLongitude;
                }
            }
            
            internal DataColumn LatitudeColumn {
                get {
                    return this.columnLatitude;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            public FeatureRow this[int index] {
                get {
                    return ((FeatureRow)(this.Rows[index]));
                }
            }
            
            public event FeatureRowChangeEventHandler FeatureRowChanged;
            
            public event FeatureRowChangeEventHandler FeatureRowChanging;
            
            public event FeatureRowChangeEventHandler FeatureRowDeleted;
            
            public event FeatureRowChangeEventHandler FeatureRowDeleting;
            
            public void AddFeatureRow(FeatureRow row) {
                this.Rows.Add(row);
            }
            
            public FeatureRow AddFeatureRow(long FeatureID, string Name, string Type, string Units, string Longitude, string Latitude, string Description) {
                FeatureRow rowFeatureRow = ((FeatureRow)(this.NewRow()));
                rowFeatureRow.ItemArray = new object[] {
                        FeatureID,
                        Name,
                        Type,
                        Units,
                        Longitude,
                        Latitude,
                        Description};
                this.Rows.Add(rowFeatureRow);
                return rowFeatureRow;
            }
            
            public FeatureRow FindByFeatureID(long FeatureID) {
                return ((FeatureRow)(this.Rows.Find(new object[] {
                            FeatureID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                FeatureDataTable cln = ((FeatureDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new FeatureDataTable();
            }
            
            internal void InitVars() {
                this.columnFeatureID = this.Columns["FeatureID"];
                this.columnName = this.Columns["Name"];
                this.columnType = this.Columns["Type"];
                this.columnUnits = this.Columns["Units"];
                this.columnLongitude = this.Columns["Longitude"];
                this.columnLatitude = this.Columns["Latitude"];
                this.columnDescription = this.Columns["Description"];
            }
            
            private void InitClass() {
                this.columnFeatureID = new DataColumn("FeatureID", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFeatureID);
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnType = new DataColumn("Type", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnType);
                this.columnUnits = new DataColumn("Units", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUnits);
                this.columnLongitude = new DataColumn("Longitude", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLongitude);
                this.columnLatitude = new DataColumn("Latitude", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLatitude);
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.Constraints.Add(new UniqueConstraint("Feature_Primary_Constraint", new DataColumn[] {
                                this.columnFeatureID}, true));
                this.columnFeatureID.AllowDBNull = false;
                this.columnFeatureID.Unique = true;
            }
            
            public FeatureRow NewFeatureRow() {
                return ((FeatureRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new FeatureRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(FeatureRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FeatureRowChanged != null)) {
                    this.FeatureRowChanged(this, new FeatureRowChangeEvent(((FeatureRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FeatureRowChanging != null)) {
                    this.FeatureRowChanging(this, new FeatureRowChangeEvent(((FeatureRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FeatureRowDeleted != null)) {
                    this.FeatureRowDeleted(this, new FeatureRowChangeEvent(((FeatureRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FeatureRowDeleting != null)) {
                    this.FeatureRowDeleting(this, new FeatureRowChangeEvent(((FeatureRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveFeatureRow(FeatureRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FeatureRow : DataRow {
            
            private FeatureDataTable tableFeature;
            
            internal FeatureRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableFeature = ((FeatureDataTable)(this.Table));
            }
            
            public long FeatureID {
                get {
                    return ((long)(this[this.tableFeature.FeatureIDColumn]));
                }
                set {
                    this[this.tableFeature.FeatureIDColumn] = value;
                }
            }
            
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableFeature.NameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFeature.NameColumn] = value;
                }
            }
            
            public string Type {
                get {
                    try {
                        return ((string)(this[this.tableFeature.TypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFeature.TypeColumn] = value;
                }
            }
            
            public string Units {
                get {
                    try {
                        return ((string)(this[this.tableFeature.UnitsColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFeature.UnitsColumn] = value;
                }
            }
            
            public string Longitude {
                get {
                    try {
                        return ((string)(this[this.tableFeature.LongitudeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFeature.LongitudeColumn] = value;
                }
            }
            
            public string Latitude {
                get {
                    try {
                        return ((string)(this[this.tableFeature.LatitudeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFeature.LatitudeColumn] = value;
                }
            }
            
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableFeature.DescriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFeature.DescriptionColumn] = value;
                }
            }
            
            public bool IsNameNull() {
                return this.IsNull(this.tableFeature.NameColumn);
            }
            
            public void SetNameNull() {
                this[this.tableFeature.NameColumn] = System.Convert.DBNull;
            }
            
            public bool IsTypeNull() {
                return this.IsNull(this.tableFeature.TypeColumn);
            }
            
            public void SetTypeNull() {
                this[this.tableFeature.TypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsUnitsNull() {
                return this.IsNull(this.tableFeature.UnitsColumn);
            }
            
            public void SetUnitsNull() {
                this[this.tableFeature.UnitsColumn] = System.Convert.DBNull;
            }
            
            public bool IsLongitudeNull() {
                return this.IsNull(this.tableFeature.LongitudeColumn);
            }
            
            public void SetLongitudeNull() {
                this[this.tableFeature.LongitudeColumn] = System.Convert.DBNull;
            }
            
            public bool IsLatitudeNull() {
                return this.IsNull(this.tableFeature.LatitudeColumn);
            }
            
            public void SetLatitudeNull() {
                this[this.tableFeature.LatitudeColumn] = System.Convert.DBNull;
            }
            
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableFeature.DescriptionColumn);
            }
            
            public void SetDescriptionNull() {
                this[this.tableFeature.DescriptionColumn] = System.Convert.DBNull;
            }
            
            public Corporation_LinkRow[] GetCorporation_LinkRows() {
                return ((Corporation_LinkRow[])(this.GetChildRows(this.Table.ChildRelations["Feature_Corp_Link"])));
            }
            
            public Person_LinkRow[] GetPerson_LinkRows() {
                return ((Person_LinkRow[])(this.GetChildRows(this.Table.ChildRelations["Feature_Person_Link"])));
            }
            
            public Sheet_LinkRow[] GetSheet_LinkRows() {
                return ((Sheet_LinkRow[])(this.GetChildRows(this.Table.ChildRelations["Feature_Sheet_Link"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FeatureRowChangeEvent : EventArgs {
            
            private FeatureRow eventRow;
            
            private DataRowAction eventAction;
            
            public FeatureRowChangeEvent(FeatureRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public FeatureRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class StreetDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnStreetID;
            
            private DataColumn columnName;
            
            private DataColumn columnStart;
            
            private DataColumn columnEnd;
            
            private DataColumn columnDescription;
            
            private DataColumn columnDirection;
            
            private DataColumn columnSide;
            
            private DataColumn columnSheetID;
            
            internal StreetDataTable() : 
                    base("Street") {
                this.InitClass();
            }
            
            internal StreetDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn StreetIDColumn {
                get {
                    return this.columnStreetID;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn StartColumn {
                get {
                    return this.columnStart;
                }
            }
            
            internal DataColumn EndColumn {
                get {
                    return this.columnEnd;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            internal DataColumn DirectionColumn {
                get {
                    return this.columnDirection;
                }
            }
            
            internal DataColumn SideColumn {
                get {
                    return this.columnSide;
                }
            }
            
            internal DataColumn SheetIDColumn {
                get {
                    return this.columnSheetID;
                }
            }
            
            public StreetRow this[int index] {
                get {
                    return ((StreetRow)(this.Rows[index]));
                }
            }
            
            public event StreetRowChangeEventHandler StreetRowChanged;
            
            public event StreetRowChangeEventHandler StreetRowChanging;
            
            public event StreetRowChangeEventHandler StreetRowDeleted;
            
            public event StreetRowChangeEventHandler StreetRowDeleting;
            
            public void AddStreetRow(StreetRow row) {
                this.Rows.Add(row);
            }
            
            public StreetRow AddStreetRow(long StreetID, string Name, long Start, long End, string Description, string Direction, string Side, long SheetID) {
                StreetRow rowStreetRow = ((StreetRow)(this.NewRow()));
                rowStreetRow.ItemArray = new object[] {
                        StreetID,
                        Name,
                        Start,
                        End,
                        Description,
                        Direction,
                        Side,
                        SheetID};
                this.Rows.Add(rowStreetRow);
                return rowStreetRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                StreetDataTable cln = ((StreetDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new StreetDataTable();
            }
            
            internal void InitVars() {
                this.columnStreetID = this.Columns["StreetID"];
                this.columnName = this.Columns["Name"];
                this.columnStart = this.Columns["Start"];
                this.columnEnd = this.Columns["End"];
                this.columnDescription = this.Columns["Description"];
                this.columnDirection = this.Columns["Direction"];
                this.columnSide = this.Columns["Side"];
                this.columnSheetID = this.Columns["SheetID"];
            }
            
            private void InitClass() {
                this.columnStreetID = new DataColumn("StreetID", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStreetID);
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnStart = new DataColumn("Start", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStart);
                this.columnEnd = new DataColumn("End", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEnd);
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnDirection = new DataColumn("Direction", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDirection);
                this.columnSide = new DataColumn("Side", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSide);
                this.columnSheetID = new DataColumn("SheetID", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSheetID);
                this.columnStreetID.AllowDBNull = false;
            }
            
            public StreetRow NewStreetRow() {
                return ((StreetRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new StreetRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(StreetRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StreetRowChanged != null)) {
                    this.StreetRowChanged(this, new StreetRowChangeEvent(((StreetRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StreetRowChanging != null)) {
                    this.StreetRowChanging(this, new StreetRowChangeEvent(((StreetRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StreetRowDeleted != null)) {
                    this.StreetRowDeleted(this, new StreetRowChangeEvent(((StreetRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StreetRowDeleting != null)) {
                    this.StreetRowDeleting(this, new StreetRowChangeEvent(((StreetRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveStreetRow(StreetRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class StreetRow : DataRow {
            
            private StreetDataTable tableStreet;
            
            internal StreetRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableStreet = ((StreetDataTable)(this.Table));
            }
            
            public long StreetID {
                get {
                    return ((long)(this[this.tableStreet.StreetIDColumn]));
                }
                set {
                    this[this.tableStreet.StreetIDColumn] = value;
                }
            }
            
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableStreet.NameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStreet.NameColumn] = value;
                }
            }
            
            public long Start {
                get {
                    try {
                        return ((long)(this[this.tableStreet.StartColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStreet.StartColumn] = value;
                }
            }
            
            public long End {
                get {
                    try {
                        return ((long)(this[this.tableStreet.EndColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStreet.EndColumn] = value;
                }
            }
            
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableStreet.DescriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStreet.DescriptionColumn] = value;
                }
            }
            
            public string Direction {
                get {
                    try {
                        return ((string)(this[this.tableStreet.DirectionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStreet.DirectionColumn] = value;
                }
            }
            
            public string Side {
                get {
                    try {
                        return ((string)(this[this.tableStreet.SideColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStreet.SideColumn] = value;
                }
            }
            
            public long SheetID {
                get {
                    try {
                        return ((long)(this[this.tableStreet.SheetIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStreet.SheetIDColumn] = value;
                }
            }
            
            public bool IsNameNull() {
                return this.IsNull(this.tableStreet.NameColumn);
            }
            
            public void SetNameNull() {
                this[this.tableStreet.NameColumn] = System.Convert.DBNull;
            }
            
            public bool IsStartNull() {
                return this.IsNull(this.tableStreet.StartColumn);
            }
            
            public void SetStartNull() {
                this[this.tableStreet.StartColumn] = System.Convert.DBNull;
            }
            
            public bool IsEndNull() {
                return this.IsNull(this.tableStreet.EndColumn);
            }
            
            public void SetEndNull() {
                this[this.tableStreet.EndColumn] = System.Convert.DBNull;
            }
            
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableStreet.DescriptionColumn);
            }
            
            public void SetDescriptionNull() {
                this[this.tableStreet.DescriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsDirectionNull() {
                return this.IsNull(this.tableStreet.DirectionColumn);
            }
            
            public void SetDirectionNull() {
                this[this.tableStreet.DirectionColumn] = System.Convert.DBNull;
            }
            
            public bool IsSideNull() {
                return this.IsNull(this.tableStreet.SideColumn);
            }
            
            public void SetSideNull() {
                this[this.tableStreet.SideColumn] = System.Convert.DBNull;
            }
            
            public bool IsSheetIDNull() {
                return this.IsNull(this.tableStreet.SheetIDColumn);
            }
            
            public void SetSheetIDNull() {
                this[this.tableStreet.SheetIDColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class StreetRowChangeEvent : EventArgs {
            
            private StreetRow eventRow;
            
            private DataRowAction eventAction;
            
            public StreetRowChangeEvent(StreetRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public StreetRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Corporation_LinkDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnFeatureID;
            
            private DataColumn columnCorpID;
            
            internal Corporation_LinkDataTable() : 
                    base("Corporation_Link") {
                this.InitClass();
            }
            
            internal Corporation_LinkDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn FeatureIDColumn {
                get {
                    return this.columnFeatureID;
                }
            }
            
            internal DataColumn CorpIDColumn {
                get {
                    return this.columnCorpID;
                }
            }
            
            public Corporation_LinkRow this[int index] {
                get {
                    return ((Corporation_LinkRow)(this.Rows[index]));
                }
            }
            
            public event Corporation_LinkRowChangeEventHandler Corporation_LinkRowChanged;
            
            public event Corporation_LinkRowChangeEventHandler Corporation_LinkRowChanging;
            
            public event Corporation_LinkRowChangeEventHandler Corporation_LinkRowDeleted;
            
            public event Corporation_LinkRowChangeEventHandler Corporation_LinkRowDeleting;
            
            public void AddCorporation_LinkRow(Corporation_LinkRow row) {
                this.Rows.Add(row);
            }
            
            public Corporation_LinkRow AddCorporation_LinkRow(FeatureRow parentFeatureRowByFeature_Corp_Link, long CorpID) {
                Corporation_LinkRow rowCorporation_LinkRow = ((Corporation_LinkRow)(this.NewRow()));
                rowCorporation_LinkRow.ItemArray = new object[] {
                        parentFeatureRowByFeature_Corp_Link[0],
                        CorpID};
                this.Rows.Add(rowCorporation_LinkRow);
                return rowCorporation_LinkRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                Corporation_LinkDataTable cln = ((Corporation_LinkDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new Corporation_LinkDataTable();
            }
            
            internal void InitVars() {
                this.columnFeatureID = this.Columns["FeatureID"];
                this.columnCorpID = this.Columns["CorpID"];
            }
            
            private void InitClass() {
                this.columnFeatureID = new DataColumn("FeatureID", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFeatureID);
                this.columnCorpID = new DataColumn("CorpID", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCorpID);
                this.columnFeatureID.AllowDBNull = false;
                this.columnCorpID.AllowDBNull = false;
            }
            
            public Corporation_LinkRow NewCorporation_LinkRow() {
                return ((Corporation_LinkRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new Corporation_LinkRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(Corporation_LinkRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Corporation_LinkRowChanged != null)) {
                    this.Corporation_LinkRowChanged(this, new Corporation_LinkRowChangeEvent(((Corporation_LinkRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Corporation_LinkRowChanging != null)) {
                    this.Corporation_LinkRowChanging(this, new Corporation_LinkRowChangeEvent(((Corporation_LinkRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Corporation_LinkRowDeleted != null)) {
                    this.Corporation_LinkRowDeleted(this, new Corporation_LinkRowChangeEvent(((Corporation_LinkRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Corporation_LinkRowDeleting != null)) {
                    this.Corporation_LinkRowDeleting(this, new Corporation_LinkRowChangeEvent(((Corporation_LinkRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveCorporation_LinkRow(Corporation_LinkRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Corporation_LinkRow : DataRow {
            
            private Corporation_LinkDataTable tableCorporation_Link;
            
            internal Corporation_LinkRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableCorporation_Link = ((Corporation_LinkDataTable)(this.Table));
            }
            
            public long FeatureID {
                get {
                    return ((long)(this[this.tableCorporation_Link.FeatureIDColumn]));
                }
                set {
                    this[this.tableCorporation_Link.FeatureIDColumn] = value;
                }
            }
            
            public long CorpID {
                get {
                    return ((long)(this[this.tableCorporation_Link.CorpIDColumn]));
                }
                set {
                    this[this.tableCorporation_Link.CorpIDColumn] = value;
                }
            }
            
            public FeatureRow FeatureRow {
                get {
                    return ((FeatureRow)(this.GetParentRow(this.Table.ParentRelations["Feature_Corp_Link"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Feature_Corp_Link"]);
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Corporation_LinkRowChangeEvent : EventArgs {
            
            private Corporation_LinkRow eventRow;
            
            private DataRowAction eventAction;
            
            public Corporation_LinkRowChangeEvent(Corporation_LinkRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public Corporation_LinkRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Person_LinkDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnFeatureID;
            
            private DataColumn columnPersonID;
            
            private DataColumn columnType;
            
            internal Person_LinkDataTable() : 
                    base("Person_Link") {
                this.InitClass();
            }
            
            internal Person_LinkDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn FeatureIDColumn {
                get {
                    return this.columnFeatureID;
                }
            }
            
            internal DataColumn PersonIDColumn {
                get {
                    return this.columnPersonID;
                }
            }
            
            internal DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            public Person_LinkRow this[int index] {
                get {
                    return ((Person_LinkRow)(this.Rows[index]));
                }
            }
            
            public event Person_LinkRowChangeEventHandler Person_LinkRowChanged;
            
            public event Person_LinkRowChangeEventHandler Person_LinkRowChanging;
            
            public event Person_LinkRowChangeEventHandler Person_LinkRowDeleted;
            
            public event Person_LinkRowChangeEventHandler Person_LinkRowDeleting;
            
            public void AddPerson_LinkRow(Person_LinkRow row) {
                this.Rows.Add(row);
            }
            
            public Person_LinkRow AddPerson_LinkRow(FeatureRow parentFeatureRowByFeature_Person_Link, long PersonID, string Type) {
                Person_LinkRow rowPerson_LinkRow = ((Person_LinkRow)(this.NewRow()));
                rowPerson_LinkRow.ItemArray = new object[] {
                        parentFeatureRowByFeature_Person_Link[0],
                        PersonID,
                        Type};
                this.Rows.Add(rowPerson_LinkRow);
                return rowPerson_LinkRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                Person_LinkDataTable cln = ((Person_LinkDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new Person_LinkDataTable();
            }
            
            internal void InitVars() {
                this.columnFeatureID = this.Columns["FeatureID"];
                this.columnPersonID = this.Columns["PersonID"];
                this.columnType = this.Columns["Type"];
            }
            
            private void InitClass() {
                this.columnFeatureID = new DataColumn("FeatureID", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFeatureID);
                this.columnPersonID = new DataColumn("PersonID", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPersonID);
                this.columnType = new DataColumn("Type", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnType);
                this.columnFeatureID.AllowDBNull = false;
                this.columnPersonID.AllowDBNull = false;
            }
            
            public Person_LinkRow NewPerson_LinkRow() {
                return ((Person_LinkRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new Person_LinkRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(Person_LinkRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Person_LinkRowChanged != null)) {
                    this.Person_LinkRowChanged(this, new Person_LinkRowChangeEvent(((Person_LinkRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Person_LinkRowChanging != null)) {
                    this.Person_LinkRowChanging(this, new Person_LinkRowChangeEvent(((Person_LinkRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Person_LinkRowDeleted != null)) {
                    this.Person_LinkRowDeleted(this, new Person_LinkRowChangeEvent(((Person_LinkRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Person_LinkRowDeleting != null)) {
                    this.Person_LinkRowDeleting(this, new Person_LinkRowChangeEvent(((Person_LinkRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovePerson_LinkRow(Person_LinkRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Person_LinkRow : DataRow {
            
            private Person_LinkDataTable tablePerson_Link;
            
            internal Person_LinkRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablePerson_Link = ((Person_LinkDataTable)(this.Table));
            }
            
            public long FeatureID {
                get {
                    return ((long)(this[this.tablePerson_Link.FeatureIDColumn]));
                }
                set {
                    this[this.tablePerson_Link.FeatureIDColumn] = value;
                }
            }
            
            public long PersonID {
                get {
                    return ((long)(this[this.tablePerson_Link.PersonIDColumn]));
                }
                set {
                    this[this.tablePerson_Link.PersonIDColumn] = value;
                }
            }
            
            public string Type {
                get {
                    try {
                        return ((string)(this[this.tablePerson_Link.TypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePerson_Link.TypeColumn] = value;
                }
            }
            
            public FeatureRow FeatureRow {
                get {
                    return ((FeatureRow)(this.GetParentRow(this.Table.ParentRelations["Feature_Person_Link"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Feature_Person_Link"]);
                }
            }
            
            public bool IsTypeNull() {
                return this.IsNull(this.tablePerson_Link.TypeColumn);
            }
            
            public void SetTypeNull() {
                this[this.tablePerson_Link.TypeColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Person_LinkRowChangeEvent : EventArgs {
            
            private Person_LinkRow eventRow;
            
            private DataRowAction eventAction;
            
            public Person_LinkRowChangeEvent(Person_LinkRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public Person_LinkRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Sheet_LinkDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnFeatureID;
            
            private DataColumn columnSheetID;
            
            private DataColumn columnX;
            
            private DataColumn columnY;
            
            internal Sheet_LinkDataTable() : 
                    base("Sheet_Link") {
                this.InitClass();
            }
            
            internal Sheet_LinkDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn FeatureIDColumn {
                get {
                    return this.columnFeatureID;
                }
            }
            
            internal DataColumn SheetIDColumn {
                get {
                    return this.columnSheetID;
                }
            }
            
            internal DataColumn XColumn {
                get {
                    return this.columnX;
                }
            }
            
            internal DataColumn YColumn {
                get {
                    return this.columnY;
                }
            }
            
            public Sheet_LinkRow this[int index] {
                get {
                    return ((Sheet_LinkRow)(this.Rows[index]));
                }
            }
            
            public event Sheet_LinkRowChangeEventHandler Sheet_LinkRowChanged;
            
            public event Sheet_LinkRowChangeEventHandler Sheet_LinkRowChanging;
            
            public event Sheet_LinkRowChangeEventHandler Sheet_LinkRowDeleted;
            
            public event Sheet_LinkRowChangeEventHandler Sheet_LinkRowDeleting;
            
            public void AddSheet_LinkRow(Sheet_LinkRow row) {
                this.Rows.Add(row);
            }
            
            public Sheet_LinkRow AddSheet_LinkRow(FeatureRow parentFeatureRowByFeature_Sheet_Link, long SheetID, long X, long Y) {
                Sheet_LinkRow rowSheet_LinkRow = ((Sheet_LinkRow)(this.NewRow()));
                rowSheet_LinkRow.ItemArray = new object[] {
                        parentFeatureRowByFeature_Sheet_Link[0],
                        SheetID,
                        X,
                        Y};
                this.Rows.Add(rowSheet_LinkRow);
                return rowSheet_LinkRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                Sheet_LinkDataTable cln = ((Sheet_LinkDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new Sheet_LinkDataTable();
            }
            
            internal void InitVars() {
                this.columnFeatureID = this.Columns["FeatureID"];
                this.columnSheetID = this.Columns["SheetID"];
                this.columnX = this.Columns["X"];
                this.columnY = this.Columns["Y"];
            }
            
            private void InitClass() {
                this.columnFeatureID = new DataColumn("FeatureID", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFeatureID);
                this.columnSheetID = new DataColumn("SheetID", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSheetID);
                this.columnX = new DataColumn("X", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnX);
                this.columnY = new DataColumn("Y", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnY);
                this.columnFeatureID.AllowDBNull = false;
                this.columnSheetID.AllowDBNull = false;
            }
            
            public Sheet_LinkRow NewSheet_LinkRow() {
                return ((Sheet_LinkRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new Sheet_LinkRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(Sheet_LinkRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Sheet_LinkRowChanged != null)) {
                    this.Sheet_LinkRowChanged(this, new Sheet_LinkRowChangeEvent(((Sheet_LinkRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Sheet_LinkRowChanging != null)) {
                    this.Sheet_LinkRowChanging(this, new Sheet_LinkRowChangeEvent(((Sheet_LinkRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Sheet_LinkRowDeleted != null)) {
                    this.Sheet_LinkRowDeleted(this, new Sheet_LinkRowChangeEvent(((Sheet_LinkRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Sheet_LinkRowDeleting != null)) {
                    this.Sheet_LinkRowDeleting(this, new Sheet_LinkRowChangeEvent(((Sheet_LinkRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSheet_LinkRow(Sheet_LinkRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Sheet_LinkRow : DataRow {
            
            private Sheet_LinkDataTable tableSheet_Link;
            
            internal Sheet_LinkRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableSheet_Link = ((Sheet_LinkDataTable)(this.Table));
            }
            
            public long FeatureID {
                get {
                    return ((long)(this[this.tableSheet_Link.FeatureIDColumn]));
                }
                set {
                    this[this.tableSheet_Link.FeatureIDColumn] = value;
                }
            }
            
            public long SheetID {
                get {
                    return ((long)(this[this.tableSheet_Link.SheetIDColumn]));
                }
                set {
                    this[this.tableSheet_Link.SheetIDColumn] = value;
                }
            }
            
            public long X {
                get {
                    try {
                        return ((long)(this[this.tableSheet_Link.XColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSheet_Link.XColumn] = value;
                }
            }
            
            public long Y {
                get {
                    try {
                        return ((long)(this[this.tableSheet_Link.YColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSheet_Link.YColumn] = value;
                }
            }
            
            public FeatureRow FeatureRow {
                get {
                    return ((FeatureRow)(this.GetParentRow(this.Table.ParentRelations["Feature_Sheet_Link"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Feature_Sheet_Link"]);
                }
            }
            
            public bool IsXNull() {
                return this.IsNull(this.tableSheet_Link.XColumn);
            }
            
            public void SetXNull() {
                this[this.tableSheet_Link.XColumn] = System.Convert.DBNull;
            }
            
            public bool IsYNull() {
                return this.IsNull(this.tableSheet_Link.YColumn);
            }
            
            public void SetYNull() {
                this[this.tableSheet_Link.YColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Sheet_LinkRowChangeEvent : EventArgs {
            
            private Sheet_LinkRow eventRow;
            
            private DataRowAction eventAction;
            
            public Sheet_LinkRowChangeEvent(Sheet_LinkRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public Sheet_LinkRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591